/*
 *  created on 20 Oct 2021 // The review side of the proposal.
 */
 
 model proposalManagement (0.6)  "The data model for managing the proposal review process. This is the observatories' view of the proposal process, intended to work for phase 1 only"
 author "Paul Harrison" 
 title "Proposal Management"
 
 include "../../../build/tmp/IVOA-v1.0.vodsl" // note that this is auto generated from dependencies during build
 include "../../../build/tmp/Coords-v1.0.vodsl" // this is a case where recursive import would be better - https://github.com/ivoa/vo-dml/issues/7 - here stc is really only used in the proposaldm
 include "proposaldm.vodsl"
 
 
 //IMPL - this and related objects should probably be in the "Management" model.
 otype Observatory -> proposal:Organization "An organisation that can perform astronomical observations" {
 	homePage : ivoa:anyURI @? "the home page for the Observatory";
 	telescopes : Telescope @+ as composition "the telescopes that the observatory controls";
 	instruments : Instrument @+ as composition "the instruments that are available for the telescopes";
 	backends : Backend @+ as composition "the backends that exist";
 	arrays: TelescopeArray @* as composition "any arrays of telescopes that typically operate together";
 	
 }
 
 abstract otype ObservingPlatform "base type of a telescope or array of telescopes"
 {
 	
 }
 
 otype Telescope -> ObservingPlatform "" {
 	name : ivoa:string "telescope name";
 	wikiId : proposal:WikiDataId @? "the wikidata id for the Telescope"; //IMPL this is just an idea to have a reference outside this database 
 
 	location : coords:RealCartesianPoint "the location of the telescope" ;
 }
 
 otype TelescopeArrayMember "" {
 	telescope references Telescope "";
 }
 
 otype TelescopeArray -> ObservingPlatform "a set of telescopes that are operated together for an observation" { // IMPL might not be necessary with ObservingConfiguration doing the same sort of thing.
 	name : ivoa:string "the array name";
    arrayMembers: TelescopeArrayMember @+ as composition "the telescopes that make up the array"; 	
 }
 
 
 
 enum InstrumentKind { //IMPL is this extensive enough to be useful?
 	continuum,
 	spectroscopic
 }
 
 
 //TODO should we be making distinction between instrument and detector (instrument composed of detector).
 otype Instrument "An instrument that can be attached to a telescope - e.g. CCD, Radio Receiver"{
 	name : ivoa:string "the instrument name - human readable";
 	description: ivoa:string @? "short human readable description";
 	wikiId : proposal:WikiDataId @? "the wikidata id for the Instrument";
 	reference : ivoa:anyURI @? " a URL that points to a more detailed description of the instrument";
 	kind : InstrumentKind "the kind of instrument";
 }
 
 otype Filter "Available filters /bandpasses for intruments " {
 	name : ivoa:string "human readable name";
 	description: ivoa:string "human readable description";
 	frequencyCoverage : proposal:SpectralWindowSetup  "the frequency range that the instrument covers";
 }
 
 otype Backend "a processing backend /pipeline- e.g. correlator" {
 	name : ivoa:string "the backend name"; 	
 	parallel : ivoa:boolean "is capable of being run at same time as other backends";
 	
 }
 
 
 
 otype ObservingMode "a configuration can be used to observe with." {
  name: ivoa:string "human readable name for the mode";
  description: ivoa:string "human readable description";
	telescope references ObservingPlatform "";
 	instrument references Instrument "";
 	filter:Filter as composition "The filter or frequency response that ";
 	//IMPL (include polarimetry in this?
 	backend references Backend "";
 	  // IMPL could add an arbitrary "options" here.
 }
  
 
 
 otype ProposalCycle "Defines collection of resources and proposals for a particular observing season" {
 	observatory references Observatory  "";
 	^title: ivoa:string "a human readable description of the cycle";
 	instructions: ivoa:anyURI @? "pointer to more detailed instructions about the cycle";
 	submissionDeadline : ivoa:datetime @? "the date by which observing proposals must be submitted to be considered for this cycle";
 	observationSessionStart : ivoa:datetime "the start date of the observing cycle";
 	observationSessionEnd: ivoa:datetime "the end date of the observing cycle";
 	observingModes: ObservingMode @+ as composition "the possible observing modes offered in the cycle";
 	availableResources : AvailableResources as composition "";
 	possibleGrades : AllocationGrade @+ as composition "The possible grades that can be allocated for this cycle";
 	tac : TAC as composition "The time allocation committee";
 	submittedProposals : SubmittedProposal @* as composition "the proposals that have been submitted in this cycle";
 	allocatedProposals : AllocatedProposal @* as composition "the proposals that have been successful and allocated time";
 }
 
 otype Reviewer  "assigned to review the proposal" {
 	person references proposal:Person "the person taking on the reviewer role";
 }
 
 
 enum TacRole "A role within the timeAllocation committee" { // FIXME - don;t think that this really reflects the roles - either Chair or not is the only real distinction
 	TechnicalReviewer "",
 	ScienceReviewer "",
 	Chair ""
 }
 
  
 otype CommitteeMember "a member of the TAC " {
 	member references Reviewer "the member"; //IMPL reviewer could be outside the TAC
 	role: TacRole "";
 }
 
 
 otype TAC "time allocation committee"
 {
 	members : CommitteeMember @+ as composition "members of the committee"; 	
 }
 
 otype ObservationConfiguration "the configuration of an observation specific to a submission to a particular cycle" {
 	observation @+ references proposal:Observation  "";
 	mode references ObservingMode "The observing mode"; //IMPL this is what allows the observation to be tied to multiple observatories.
 }
  
 otype SubmittedProposal -> proposal:AbstractProposal "an instance of a proposal that has been submitted" {
 //	proposal references proposal:ObservingProposal  "the proposal that was submitted"; //IMPL this is a reference - this is a slight hack as we really want a composition to "freeze" the original proposal - this messes with the original references in the proposal as then they become contained.
 	config : ObservationConfiguration @* as composition "";
 	submissionDate : ivoa:datetime "the date that the proposal was submitted";
 	successful : ivoa:boolean "the proposal can go on to allocation";
 	reviewsCompleteDate : ivoa:datetime "the date when all the proposals are due";
 	reviews : ProposalReview @* as composition "the reviews";
 	}
 
 
 otype AllocatedProposal "an instance of a proposal that is allocated observing time" {
 	submitted references SubmittedProposal "the proposal"; 	
 	allocation : AllocatedBlock @+ as ordered composition "what is allocated to the proposal";
 }
 
 otype ProposalReview "A review of a proposal" {
 	reviewer references Reviewer "the reviewer making this review";
 	comment: ivoa:string "Description";
 	score : ivoa:real "the review score";
 	technicalFeasibility: ivoa:boolean "is the proposal technically feasible";
 	reviewDate: ivoa:datetime "the date that the review is submitted";
 }
 
 
 otype ResourceType "a type of resource  " {
 	name : ivoa:string "the name of the resource type";
 	unit : ivoa:string "";
 }
 
 //TODO is the idea of a "resource" too general?
 otype Resource "A resource that will be consumed by allocating an observation from a proposal" {
 	type references ResourceType "the type of the resource";
 	amount : ivoa:real "The amount of the resource"; 
 }

 otype AvailableResources "The list of resources that are available" {
 	resources  : Resource @* as ordered composition ""; // TODO need to ensure that each resource type can occur only once.
 }
 
 
  otype AllocationGrade "The final grade given by the TAC" {
  	/*
  	 * the idea of this is to be able to define classes of allocation that have differing priorities of actually being observed.
  	 */
 	name : ivoa:string "the name of the grade";
 	description : ivoa:string "what this grade means";
  	
  }
 
 otype ResourceBlock  "A block of resources that can be allocated"
 {
 	mode references ObservingMode "";
 	resource : Resource as composition  "the amount of resource";
 }
 
 otype AllocatedBlock -> ResourceBlock "A block of resources that have been allocated" {
 	grade references AllocationGrade "";
 	
 }
 
 

 

 
 
 